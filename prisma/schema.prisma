generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model patient {
  id                 String         @id @default(uuid())
  createdAt          DateTime       @default(now())
  firstName          String
  lastName           String
  email              String         @unique
  password           String
  patientId          String         @unique
  dateOfBirth        DateTime
  city               String
  state              String
  pinCode            Int
  contactName        String
  contactNumber      String
  phoneNumber        String
  streetAddress      String
  bloodType          bloodType
  allergies          String
  medicalConditions  String
  currentMedications String
  currentPassword    String
  age                Int
  role               Role
  appointments       appointment[]
  prescriptions      prescription[]
}

model doctor {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  firstName      String
  lastName       String
  age            Int
  licenseNumber  String
  specialization String
  email          String         @unique
  password       String
  role           Role
  qualifications String   
  experiences    String   
  description    String
  appointments   appointment[]
  prescriptions  prescription[]
}

model medical {
  id             String   @id @default(uuid())
  shopName       String 
  email          String   @unique
  password       String
  licenseNumber  String   @unique 
  phoneNumber    String?
  createdAt      DateTime @default(now())
  address        String
  role           Role
}

model appointment {
  id              String          @id @default(uuid())
  date            DateTime
  reason          String?
  appointmentType appointmentType
  status          String          @default("Scheduled")
  patientId       String
  doctorId        String
  doctor          doctor          @relation(fields: [doctorId], references: [id])
  patient         patient         @relation(fields: [patientId], references: [id])
}

model prescription {
  id             String   @id @default(uuid())
  prescriptionId String   @unique
  createdAt      DateTime @default(now())
  medicine       String
  dosage         String
  frequency      String
  startDate      DateTime
  endDate        DateTime
  patientId      String
  doctorId       String
  doctor         doctor   @relation(fields: [doctorId], references: [id])
  patient        patient  @relation(fields: [patientId], references: [id])
}

enum bloodType {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum Role {
  PATIENT
  DOCTOR
  MEDICAL
}

enum appointmentType {
  NEW_PATIENT
  FOLLOW_UP
  CHECK_UP
}
